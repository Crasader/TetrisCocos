// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tetris {
namespace proto {
class Tetromino_ColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tetromino_Color>
      _instance;
} _Tetromino_Color_default_instance_;
class Tetromino_PosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tetromino_Pos>
      _instance;
} _Tetromino_Pos_default_instance_;
class TetrominoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tetromino>
      _instance;
} _Tetromino_default_instance_;
class SolidBlocksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolidBlocks>
      _instance;
} _SolidBlocks_default_instance_;
class BoardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Board>
      _instance;
} _Board_default_instance_;
}  // namespace proto
}  // namespace tetris
namespace protobuf_message_2eproto {
void InitDefaultsTetromino_ColorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tetris::proto::_Tetromino_Color_default_instance_;
    new (ptr) ::tetris::proto::Tetromino_Color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tetris::proto::Tetromino_Color::InitAsDefaultInstance();
}

void InitDefaultsTetromino_Color() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTetromino_ColorImpl);
}

void InitDefaultsTetromino_PosImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tetris::proto::_Tetromino_Pos_default_instance_;
    new (ptr) ::tetris::proto::Tetromino_Pos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tetris::proto::Tetromino_Pos::InitAsDefaultInstance();
}

void InitDefaultsTetromino_Pos() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTetromino_PosImpl);
}

void InitDefaultsTetrominoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsTetromino_Color();
  protobuf_message_2eproto::InitDefaultsTetromino_Pos();
  {
    void* ptr = &::tetris::proto::_Tetromino_default_instance_;
    new (ptr) ::tetris::proto::Tetromino();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tetris::proto::Tetromino::InitAsDefaultInstance();
}

void InitDefaultsTetromino() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTetrominoImpl);
}

void InitDefaultsSolidBlocksImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsTetromino();
  {
    void* ptr = &::tetris::proto::_SolidBlocks_default_instance_;
    new (ptr) ::tetris::proto::SolidBlocks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tetris::proto::SolidBlocks::InitAsDefaultInstance();
}

void InitDefaultsSolidBlocks() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSolidBlocksImpl);
}

void InitDefaultsBoardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsTetromino();
  protobuf_message_2eproto::InitDefaultsSolidBlocks();
  {
    void* ptr = &::tetris::proto::_Board_default_instance_;
    new (ptr) ::tetris::proto::Board();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tetris::proto::Board::InitAsDefaultInstance();
}

void InitDefaultsBoard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoardImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Color, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Color, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Color, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Color, a_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Pos, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino_Pos, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino, bordercolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino, gridmatrixpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Tetromino, unitblocksvec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::SolidBlocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::SolidBlocks, tetrominos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Board, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Board, messagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Board, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Board, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Board, movingtet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tetris::proto::Board, solidblocks_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tetris::proto::Tetromino_Color)},
  { 9, -1, sizeof(::tetris::proto::Tetromino_Pos)},
  { 16, -1, sizeof(::tetris::proto::Tetromino)},
  { 25, -1, sizeof(::tetris::proto::SolidBlocks)},
  { 31, -1, sizeof(::tetris::proto::Board)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tetris::proto::_Tetromino_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tetris::proto::_Tetromino_Pos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tetris::proto::_Tetromino_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tetris::proto::_SolidBlocks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tetris::proto::_Board_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmessage.proto\022\014tetris.proto\"\251\002\n\tTetrom"
      "ino\022,\n\005color\030\001 \001(\0132\035.tetris.proto.Tetrom"
      "ino.Color\0222\n\013borderColor\030\002 \001(\0132\035.tetris."
      "proto.Tetromino.Color\0224\n\017gridMatrixPoint"
      "\030\003 \001(\0132\033.tetris.proto.Tetromino.Pos\0222\n\ru"
      "nitBlocksVec\030\004 \003(\0132\033.tetris.proto.Tetrom"
      "ino.Pos\0323\n\005Color\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030\002 \001(\002\022\t"
      "\n\001b\030\003 \001(\002\022\t\n\001a\030\004 \001(\002\032\033\n\003Pos\022\t\n\001x\030\001 \001(\005\022\t"
      "\n\001y\030\002 \001(\005\":\n\013SolidBlocks\022+\n\ntetrominos\030\001"
      " \003(\0132\027.tetris.proto.Tetromino\"\327\002\n\005Board\022"
      "4\n\013messageType\030\001 \001(\0162\037.tetris.proto.Boar"
      "d.MessageType\022\r\n\005score\030\002 \001(\005\022\r\n\005level\030\003 "
      "\001(\005\022*\n\tmovingTet\030\004 \001(\0132\027.tetris.proto.Te"
      "tromino\022.\n\013solidBlocks\030\005 \001(\0132\031.tetris.pr"
      "oto.SolidBlocks\"\235\001\n\013MessageType\022\024\n\020GAME_"
      "OVER_SIGNAL\020\000\022\025\n\021GAME_PAUSE_SIGNAL\020\001\022\025\n\021"
      "GAME_START_SIGNAL\020\003\022\026\n\022GAME_RESUME_SIGNA"
      "L\020\004\022\026\n\022ENTIRE_BOARD_STATE\020\005\022\032\n\026MOVING_TE"
      "TROMINO_STATE\020\006B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 747);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
namespace tetris {
namespace proto {
const ::google::protobuf::EnumDescriptor* Board_MessageType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool Board_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Board_MessageType Board::GAME_OVER_SIGNAL;
const Board_MessageType Board::GAME_PAUSE_SIGNAL;
const Board_MessageType Board::GAME_START_SIGNAL;
const Board_MessageType Board::GAME_RESUME_SIGNAL;
const Board_MessageType Board::ENTIRE_BOARD_STATE;
const Board_MessageType Board::MOVING_TETROMINO_STATE;
const Board_MessageType Board::MessageType_MIN;
const Board_MessageType Board::MessageType_MAX;
const int Board::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Tetromino_Color::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tetromino_Color::kRFieldNumber;
const int Tetromino_Color::kGFieldNumber;
const int Tetromino_Color::kBFieldNumber;
const int Tetromino_Color::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tetromino_Color::Tetromino_Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsTetromino_Color();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tetris.proto.Tetromino.Color)
}
Tetromino_Color::Tetromino_Color(const Tetromino_Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:tetris.proto.Tetromino.Color)
}

void Tetromino_Color::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _cached_size_ = 0;
}

Tetromino_Color::~Tetromino_Color() {
  // @@protoc_insertion_point(destructor:tetris.proto.Tetromino.Color)
  SharedDtor();
}

void Tetromino_Color::SharedDtor() {
}

void Tetromino_Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tetromino_Color::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tetromino_Color& Tetromino_Color::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsTetromino_Color();
  return *internal_default_instance();
}

Tetromino_Color* Tetromino_Color::New(::google::protobuf::Arena* arena) const {
  Tetromino_Color* n = new Tetromino_Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tetromino_Color::Clear() {
// @@protoc_insertion_point(message_clear_start:tetris.proto.Tetromino.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear();
}

bool Tetromino_Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tetris.proto.Tetromino.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tetris.proto.Tetromino.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tetris.proto.Tetromino.Color)
  return false;
#undef DO_
}

void Tetromino_Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tetris.proto.Tetromino.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // float g = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // float a = 4;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tetris.proto.Tetromino.Color)
}

::google::protobuf::uint8* Tetromino_Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tetris.proto.Tetromino.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // float g = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // float a = 4;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tetris.proto.Tetromino.Color)
  return target;
}

size_t Tetromino_Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tetris.proto.Tetromino.Color)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float r = 1;
  if (this->r() != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (this->g() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // float a = 4;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tetromino_Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tetris.proto.Tetromino.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Tetromino_Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tetromino_Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tetris.proto.Tetromino.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tetris.proto.Tetromino.Color)
    MergeFrom(*source);
  }
}

void Tetromino_Color::MergeFrom(const Tetromino_Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tetris.proto.Tetromino.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
}

void Tetromino_Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tetris.proto.Tetromino.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tetromino_Color::CopyFrom(const Tetromino_Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tetris.proto.Tetromino.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tetromino_Color::IsInitialized() const {
  return true;
}

void Tetromino_Color::Swap(Tetromino_Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tetromino_Color::InternalSwap(Tetromino_Color* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tetromino_Color::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tetromino_Pos::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tetromino_Pos::kXFieldNumber;
const int Tetromino_Pos::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tetromino_Pos::Tetromino_Pos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsTetromino_Pos();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tetris.proto.Tetromino.Pos)
}
Tetromino_Pos::Tetromino_Pos(const Tetromino_Pos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:tetris.proto.Tetromino.Pos)
}

void Tetromino_Pos::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Tetromino_Pos::~Tetromino_Pos() {
  // @@protoc_insertion_point(destructor:tetris.proto.Tetromino.Pos)
  SharedDtor();
}

void Tetromino_Pos::SharedDtor() {
}

void Tetromino_Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tetromino_Pos::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tetromino_Pos& Tetromino_Pos::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsTetromino_Pos();
  return *internal_default_instance();
}

Tetromino_Pos* Tetromino_Pos::New(::google::protobuf::Arena* arena) const {
  Tetromino_Pos* n = new Tetromino_Pos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tetromino_Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:tetris.proto.Tetromino.Pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Tetromino_Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tetris.proto.Tetromino.Pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tetris.proto.Tetromino.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tetris.proto.Tetromino.Pos)
  return false;
#undef DO_
}

void Tetromino_Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tetris.proto.Tetromino.Pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tetris.proto.Tetromino.Pos)
}

::google::protobuf::uint8* Tetromino_Pos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tetris.proto.Tetromino.Pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tetris.proto.Tetromino.Pos)
  return target;
}

size_t Tetromino_Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tetris.proto.Tetromino.Pos)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tetromino_Pos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tetris.proto.Tetromino.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  const Tetromino_Pos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tetromino_Pos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tetris.proto.Tetromino.Pos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tetris.proto.Tetromino.Pos)
    MergeFrom(*source);
  }
}

void Tetromino_Pos::MergeFrom(const Tetromino_Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tetris.proto.Tetromino.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Tetromino_Pos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tetris.proto.Tetromino.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tetromino_Pos::CopyFrom(const Tetromino_Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tetris.proto.Tetromino.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tetromino_Pos::IsInitialized() const {
  return true;
}

void Tetromino_Pos::Swap(Tetromino_Pos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tetromino_Pos::InternalSwap(Tetromino_Pos* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tetromino_Pos::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tetromino::InitAsDefaultInstance() {
  ::tetris::proto::_Tetromino_default_instance_._instance.get_mutable()->color_ = const_cast< ::tetris::proto::Tetromino_Color*>(
      ::tetris::proto::Tetromino_Color::internal_default_instance());
  ::tetris::proto::_Tetromino_default_instance_._instance.get_mutable()->bordercolor_ = const_cast< ::tetris::proto::Tetromino_Color*>(
      ::tetris::proto::Tetromino_Color::internal_default_instance());
  ::tetris::proto::_Tetromino_default_instance_._instance.get_mutable()->gridmatrixpoint_ = const_cast< ::tetris::proto::Tetromino_Pos*>(
      ::tetris::proto::Tetromino_Pos::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tetromino::kColorFieldNumber;
const int Tetromino::kBorderColorFieldNumber;
const int Tetromino::kGridMatrixPointFieldNumber;
const int Tetromino::kUnitBlocksVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tetromino::Tetromino()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsTetromino();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tetris.proto.Tetromino)
}
Tetromino::Tetromino(const Tetromino& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      unitblocksvec_(from.unitblocksvec_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::tetris::proto::Tetromino_Color(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_bordercolor()) {
    bordercolor_ = new ::tetris::proto::Tetromino_Color(*from.bordercolor_);
  } else {
    bordercolor_ = NULL;
  }
  if (from.has_gridmatrixpoint()) {
    gridmatrixpoint_ = new ::tetris::proto::Tetromino_Pos(*from.gridmatrixpoint_);
  } else {
    gridmatrixpoint_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tetris.proto.Tetromino)
}

void Tetromino::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gridmatrixpoint_) -
      reinterpret_cast<char*>(&color_)) + sizeof(gridmatrixpoint_));
  _cached_size_ = 0;
}

Tetromino::~Tetromino() {
  // @@protoc_insertion_point(destructor:tetris.proto.Tetromino)
  SharedDtor();
}

void Tetromino::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete bordercolor_;
  if (this != internal_default_instance()) delete gridmatrixpoint_;
}

void Tetromino::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tetromino::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tetromino& Tetromino::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsTetromino();
  return *internal_default_instance();
}

Tetromino* Tetromino::New(::google::protobuf::Arena* arena) const {
  Tetromino* n = new Tetromino;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tetromino::Clear() {
// @@protoc_insertion_point(message_clear_start:tetris.proto.Tetromino)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unitblocksvec_.Clear();
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && bordercolor_ != NULL) {
    delete bordercolor_;
  }
  bordercolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && gridmatrixpoint_ != NULL) {
    delete gridmatrixpoint_;
  }
  gridmatrixpoint_ = NULL;
  _internal_metadata_.Clear();
}

bool Tetromino::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tetris.proto.Tetromino)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tetris.proto.Tetromino.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tetris.proto.Tetromino.Color borderColor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bordercolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tetris.proto.Tetromino.Pos gridMatrixPoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gridmatrixpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tetris.proto.Tetromino.Pos unitBlocksVec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_unitblocksvec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tetris.proto.Tetromino)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tetris.proto.Tetromino)
  return false;
#undef DO_
}

void Tetromino::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tetris.proto.Tetromino)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tetris.proto.Tetromino.Color color = 1;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_, output);
  }

  // .tetris.proto.Tetromino.Color borderColor = 2;
  if (this->has_bordercolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bordercolor_, output);
  }

  // .tetris.proto.Tetromino.Pos gridMatrixPoint = 3;
  if (this->has_gridmatrixpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gridmatrixpoint_, output);
  }

  // repeated .tetris.proto.Tetromino.Pos unitBlocksVec = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitblocksvec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unitblocksvec(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tetris.proto.Tetromino)
}

::google::protobuf::uint8* Tetromino::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tetris.proto.Tetromino)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tetris.proto.Tetromino.Color color = 1;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->color_, deterministic, target);
  }

  // .tetris.proto.Tetromino.Color borderColor = 2;
  if (this->has_bordercolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->bordercolor_, deterministic, target);
  }

  // .tetris.proto.Tetromino.Pos gridMatrixPoint = 3;
  if (this->has_gridmatrixpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->gridmatrixpoint_, deterministic, target);
  }

  // repeated .tetris.proto.Tetromino.Pos unitBlocksVec = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitblocksvec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->unitblocksvec(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tetris.proto.Tetromino)
  return target;
}

size_t Tetromino::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tetris.proto.Tetromino)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tetris.proto.Tetromino.Pos unitBlocksVec = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->unitblocksvec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unitblocksvec(static_cast<int>(i)));
    }
  }

  // .tetris.proto.Tetromino.Color color = 1;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->color_);
  }

  // .tetris.proto.Tetromino.Color borderColor = 2;
  if (this->has_bordercolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bordercolor_);
  }

  // .tetris.proto.Tetromino.Pos gridMatrixPoint = 3;
  if (this->has_gridmatrixpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gridmatrixpoint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tetromino::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tetris.proto.Tetromino)
  GOOGLE_DCHECK_NE(&from, this);
  const Tetromino* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tetromino>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tetris.proto.Tetromino)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tetris.proto.Tetromino)
    MergeFrom(*source);
  }
}

void Tetromino::MergeFrom(const Tetromino& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tetris.proto.Tetromino)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unitblocksvec_.MergeFrom(from.unitblocksvec_);
  if (from.has_color()) {
    mutable_color()->::tetris::proto::Tetromino_Color::MergeFrom(from.color());
  }
  if (from.has_bordercolor()) {
    mutable_bordercolor()->::tetris::proto::Tetromino_Color::MergeFrom(from.bordercolor());
  }
  if (from.has_gridmatrixpoint()) {
    mutable_gridmatrixpoint()->::tetris::proto::Tetromino_Pos::MergeFrom(from.gridmatrixpoint());
  }
}

void Tetromino::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tetris.proto.Tetromino)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tetromino::CopyFrom(const Tetromino& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tetris.proto.Tetromino)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tetromino::IsInitialized() const {
  return true;
}

void Tetromino::Swap(Tetromino* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tetromino::InternalSwap(Tetromino* other) {
  using std::swap;
  unitblocksvec_.InternalSwap(&other->unitblocksvec_);
  swap(color_, other->color_);
  swap(bordercolor_, other->bordercolor_);
  swap(gridmatrixpoint_, other->gridmatrixpoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tetromino::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolidBlocks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolidBlocks::kTetrominosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolidBlocks::SolidBlocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsSolidBlocks();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tetris.proto.SolidBlocks)
}
SolidBlocks::SolidBlocks(const SolidBlocks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tetrominos_(from.tetrominos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tetris.proto.SolidBlocks)
}

void SolidBlocks::SharedCtor() {
  _cached_size_ = 0;
}

SolidBlocks::~SolidBlocks() {
  // @@protoc_insertion_point(destructor:tetris.proto.SolidBlocks)
  SharedDtor();
}

void SolidBlocks::SharedDtor() {
}

void SolidBlocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolidBlocks::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolidBlocks& SolidBlocks::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsSolidBlocks();
  return *internal_default_instance();
}

SolidBlocks* SolidBlocks::New(::google::protobuf::Arena* arena) const {
  SolidBlocks* n = new SolidBlocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolidBlocks::Clear() {
// @@protoc_insertion_point(message_clear_start:tetris.proto.SolidBlocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tetrominos_.Clear();
  _internal_metadata_.Clear();
}

bool SolidBlocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tetris.proto.SolidBlocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tetris.proto.Tetromino tetrominos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tetrominos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tetris.proto.SolidBlocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tetris.proto.SolidBlocks)
  return false;
#undef DO_
}

void SolidBlocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tetris.proto.SolidBlocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tetris.proto.Tetromino tetrominos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tetrominos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tetrominos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tetris.proto.SolidBlocks)
}

::google::protobuf::uint8* SolidBlocks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tetris.proto.SolidBlocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tetris.proto.Tetromino tetrominos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tetrominos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tetrominos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tetris.proto.SolidBlocks)
  return target;
}

size_t SolidBlocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tetris.proto.SolidBlocks)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tetris.proto.Tetromino tetrominos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tetrominos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tetrominos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolidBlocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tetris.proto.SolidBlocks)
  GOOGLE_DCHECK_NE(&from, this);
  const SolidBlocks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolidBlocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tetris.proto.SolidBlocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tetris.proto.SolidBlocks)
    MergeFrom(*source);
  }
}

void SolidBlocks::MergeFrom(const SolidBlocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tetris.proto.SolidBlocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tetrominos_.MergeFrom(from.tetrominos_);
}

void SolidBlocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tetris.proto.SolidBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolidBlocks::CopyFrom(const SolidBlocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tetris.proto.SolidBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolidBlocks::IsInitialized() const {
  return true;
}

void SolidBlocks::Swap(SolidBlocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolidBlocks::InternalSwap(SolidBlocks* other) {
  using std::swap;
  tetrominos_.InternalSwap(&other->tetrominos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolidBlocks::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Board::InitAsDefaultInstance() {
  ::tetris::proto::_Board_default_instance_._instance.get_mutable()->movingtet_ = const_cast< ::tetris::proto::Tetromino*>(
      ::tetris::proto::Tetromino::internal_default_instance());
  ::tetris::proto::_Board_default_instance_._instance.get_mutable()->solidblocks_ = const_cast< ::tetris::proto::SolidBlocks*>(
      ::tetris::proto::SolidBlocks::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Board::kMessageTypeFieldNumber;
const int Board::kScoreFieldNumber;
const int Board::kLevelFieldNumber;
const int Board::kMovingTetFieldNumber;
const int Board::kSolidBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Board::Board()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsBoard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tetris.proto.Board)
}
Board::Board(const Board& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_movingtet()) {
    movingtet_ = new ::tetris::proto::Tetromino(*from.movingtet_);
  } else {
    movingtet_ = NULL;
  }
  if (from.has_solidblocks()) {
    solidblocks_ = new ::tetris::proto::SolidBlocks(*from.solidblocks_);
  } else {
    solidblocks_ = NULL;
  }
  ::memcpy(&messagetype_, &from.messagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&messagetype_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:tetris.proto.Board)
}

void Board::SharedCtor() {
  ::memset(&movingtet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&movingtet_)) + sizeof(level_));
  _cached_size_ = 0;
}

Board::~Board() {
  // @@protoc_insertion_point(destructor:tetris.proto.Board)
  SharedDtor();
}

void Board::SharedDtor() {
  if (this != internal_default_instance()) delete movingtet_;
  if (this != internal_default_instance()) delete solidblocks_;
}

void Board::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Board::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Board& Board::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsBoard();
  return *internal_default_instance();
}

Board* Board::New(::google::protobuf::Arena* arena) const {
  Board* n = new Board;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Board::Clear() {
// @@protoc_insertion_point(message_clear_start:tetris.proto.Board)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && movingtet_ != NULL) {
    delete movingtet_;
  }
  movingtet_ = NULL;
  if (GetArenaNoVirtual() == NULL && solidblocks_ != NULL) {
    delete solidblocks_;
  }
  solidblocks_ = NULL;
  ::memset(&messagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&messagetype_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool Board::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tetris.proto.Board)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tetris.proto.Board.MessageType messageType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_messagetype(static_cast< ::tetris::proto::Board_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tetris.proto.Tetromino movingTet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_movingtet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tetris.proto.SolidBlocks solidBlocks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solidblocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tetris.proto.Board)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tetris.proto.Board)
  return false;
#undef DO_
}

void Board::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tetris.proto.Board)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tetris.proto.Board.MessageType messageType = 1;
  if (this->messagetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // .tetris.proto.Tetromino movingTet = 4;
  if (this->has_movingtet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->movingtet_, output);
  }

  // .tetris.proto.SolidBlocks solidBlocks = 5;
  if (this->has_solidblocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->solidblocks_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tetris.proto.Board)
}

::google::protobuf::uint8* Board::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tetris.proto.Board)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tetris.proto.Board.MessageType messageType = 1;
  if (this->messagetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // .tetris.proto.Tetromino movingTet = 4;
  if (this->has_movingtet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->movingtet_, deterministic, target);
  }

  // .tetris.proto.SolidBlocks solidBlocks = 5;
  if (this->has_solidblocks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->solidblocks_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tetris.proto.Board)
  return target;
}

size_t Board::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tetris.proto.Board)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tetris.proto.Tetromino movingTet = 4;
  if (this->has_movingtet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->movingtet_);
  }

  // .tetris.proto.SolidBlocks solidBlocks = 5;
  if (this->has_solidblocks()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidblocks_);
  }

  // .tetris.proto.Board.MessageType messageType = 1;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Board::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tetris.proto.Board)
  GOOGLE_DCHECK_NE(&from, this);
  const Board* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Board>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tetris.proto.Board)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tetris.proto.Board)
    MergeFrom(*source);
  }
}

void Board::MergeFrom(const Board& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tetris.proto.Board)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_movingtet()) {
    mutable_movingtet()->::tetris::proto::Tetromino::MergeFrom(from.movingtet());
  }
  if (from.has_solidblocks()) {
    mutable_solidblocks()->::tetris::proto::SolidBlocks::MergeFrom(from.solidblocks());
  }
  if (from.messagetype() != 0) {
    set_messagetype(from.messagetype());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void Board::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tetris.proto.Board)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Board::CopyFrom(const Board& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tetris.proto.Board)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Board::IsInitialized() const {
  return true;
}

void Board::Swap(Board* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Board::InternalSwap(Board* other) {
  using std::swap;
  swap(movingtet_, other->movingtet_);
  swap(solidblocks_, other->solidblocks_);
  swap(messagetype_, other->messagetype_);
  swap(score_, other->score_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Board::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tetris

// @@protoc_insertion_point(global_scope)
